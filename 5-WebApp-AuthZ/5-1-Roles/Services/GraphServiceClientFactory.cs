using Microsoft.Graph;
using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

namespace WebApp_OpenIDConnect_DotNet.Services
{
    /// <summary>
    ///
    /// </summary>
    /// <autogeneratedoc />
    public class GraphServiceClientFactory
    {
        /// <summary>
        /// Gets the authenticated graph SDK client.
        /// </summary>
        /// <param name="acquireAccessToken">The acquire access token.</param>
        /// <param name="baseUrl">The base URL.</param>
        /// <returns></returns>
        /// <autogeneratedoc />
        public static GraphServiceClient GetAuthenticatedGraphClient(Func<Task<string>> acquireAccessToken, string baseUrl = null)
        {
            return new GraphServiceClient(baseUrl, new CustomAuthenticationProvider(acquireAccessToken));
        }
    }

    /// <summary>
    /// An IAuthenticationProvider for MS graph SDK
    /// </summary>
    /// <seealso cref="Microsoft.Graph.IAuthenticationProvider" />
    /// <autogeneratedoc />
    internal class CustomAuthenticationProvider : IAuthenticationProvider
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CustomAuthenticationProvider"/> class.
        /// </summary>
        /// <param name="acquireTokenCallback">The acquire token callback.</param>
        /// <autogeneratedoc />
        public CustomAuthenticationProvider(Func<Task<string>> acquireTokenCallback)
        {
            acquireAccessToken = acquireTokenCallback;
        }

        private Func<Task<string>> acquireAccessToken;

        /// <summary>
        /// Authenticates the specified request message.
        /// </summary>
        /// <param name="request">The <see cref="T:System.Net.Http.HttpRequestMessage" /> to authenticate.</param>
        /// <autogeneratedoc />
        public async Task AuthenticateRequestAsync(HttpRequestMessage request)
        {
            string accessToken = await acquireAccessToken.Invoke();

            // Append the access token to the request.
            request.Headers.Authorization = new AuthenticationHeaderValue(
                Infrastructure.Constants.BearerAuthorizationScheme, accessToken);
        }
    }
}